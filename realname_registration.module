<?php
/**
 * @file
 * For using real names during registration/
 *
 * The realname_registration allows usernames to be generated based upon
 * required first name and last name CCK fields on the registration form.
 */

/**
 * Implementation of hook_form_alter().
 */
function realname_registration_form_alter(&$form, $form_state, $form_id) {
  if (!($form_id == 'user_register')) {
    return;
  }

  $lastname_field = variable_get('realname_registration_lastname_field','');
  $firstname_field = variable_get('realname_registration_firstname_field','');

  if(isset($lastname_field) && isset($firstname_field)) {
    if (isset($form['account']) && is_array($form['account'])) {
      $form['account']['name']['#type'] = 'hidden';
      $form['account']['name']['#value'] = 'unset_username';
    }
    else {
      $form['name']['#type'] = 'hidden';
      $form['name']['#value'] = 'unset_username';
    }
    $form[$firstname_field]['#weight'] = -500;
    $form[$lastname_field]['#weight'] = -499;

    if(variable_get('realname_registration_use_validation','')) {
      $form['#validate'][] = 'realname_registration_validate';
    }
  }
}

/**
 * Implementation of hook_user().
 */
function realname_registration_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'validate') {
    if(isset($edit['name'])) {
      if($edit['name'] == 'unset_username') {

        $lastname_field = variable_get('realname_registration_lastname_field','');
        $firstname_field = variable_get('realname_registration_firstname_field','');

        if((variable_get('realname_registration_ucfirst', 0)) == 1) {
          $edit[$firstname_field] = ucfirst($edit[$firstname_field]);
          $edit[$lastname_field] = ucfirst($edit[$lastname_field]);
        }
        // Generate the username based on first name and last name fields.
        if((variable_get('realname_registration_format', 0)) == 0) {
          $username = $edit[$firstname_field]." ".$edit[$lastname_field];
        }
        if((variable_get('realname_registration_format', 0)) == 1) {
          $first_init = drupal_substr($edit[$firstname_field], 0, 1);
          $lastname = $edit[$lastname_field];
          $username = $first_init.$lastname;
        }
        if(variable_get('realname_registration_tolower', 0)) {
          $username = strtolower($username);
        }

        // Check if the username already exists in the database.
        $original_username = $username;
        while (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE name = '%s';", $username))) {
          $username = $original_username . ++$i;
        }
        $edit['name'] = $username;
      }
    }
  }
}


/**
 * Form validation handler for user_register_form().
 *
 * @see user_register_form()
 * @see user_register_submit()
 */


function realname_registration_validate($form, &$form_state) {
  $lastname_field = variable_get('realname_registration_lastname_field','');
  $firstname_field = variable_get('realname_registration_firstname_field','');

  // A first name must be letters only.
  if (!preg_match("/^[A-ZÀ-ÖØ-öø-ÿ]+$/i", $form_state['values'][$firstname_field])) {
    form_set_error($firstname_field, t('First name must only contain letters'));
  }
  // A last name must be letters only.
  if (!preg_match("/^[A-ZÀ-ÖØ-öø-ÿ]+$/i", $form_state['values'][$lastname_field])) {
    form_set_error($lastname_field, t('Last name must only contain letters'));
  }
}

/**
 * Implementation of hook_menu().
 */
function realname_registration_menu() {
  $items = array();

  $items['admin/user/realname_registration'] = array(
    'title' => t('Realname registration'),
    'description' => t('Realname registration settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('realname_registration_settings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file' => 'realname_registration.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_token_info().
 */
function realname_registration_token_list($type = 'all') {
  if ($type == 'user' || $type == 'all') {
    $tokens['user']['first-name']     = t("The first name of the user.");
    $tokens['user']['last-name']      = t("The last name of the user.");
    $tokens['user']['first-initial']  = t("The first initial of the user.");
    $tokens['user']['last-initial']   = t("The last initial of the user.");
    return $tokens;
  }
}

/**
 * Implements hook_tokens().
 */
function realname_registration_token_values($type, $object = NULL, $options = array()) {
  $values = array();
  switch ($type) {
    case 'user':
      if (!empty($object)) {
        $account = $object;
      }
      else {
        $account = user_load(array('uid' => $GLOBALS['user']->uid));
      }
      if ($account->uid) {
        $lastname_field = variable_get('realname_registration_lastname_field','');
        $firstname_field = variable_get('realname_registration_firstname_field','');
        
        $firstname = db_result(db_query("
           SELECT profile_values.value
           FROM {profile_values}
           INNER JOIN {profile_fields}
           ON profile_values.fid = profile_fields.fid
           WHERE profile_fields.name = '%s'
           AND profile_values.uid = %d
         ", $firstname_field, $account->uid ));
        
        $lastname = db_result(db_query("
           SELECT profile_values.value
           FROM profile_values
           INNER JOIN profile_fields
           ON profile_values.fid = profile_fields.fid
           WHERE profile_fields.name = '%s'
           AND profile_values.uid = %d
         ", $lastname_field, $account->uid ));
        
        $values['first-name'] = $firstname;
        $values['last-name'] = $lastname;
        $values['first-initial'] = drupal_substr($firstname, 0, 1);
        $values['last-initial'] = drupal_substr($lastname, 0, 1);
      }
      break;
  }
  return $values;
}